
####ES5 AND ES6####
####CODESHEETS####



##FUNCTION
--ES5
function getNum() {
    return 10;
}
--ES6
const getNum = () => 10;




##ARRAY FUNCTION
--ES5
function getArr() {
    return [1, 2, 3];
}
--ES6
const getArr = () => [1, 2, 3];




##OBJECT FUNCTION
--ES5
function getObj() {
    return { a: 1, b: 2, c: 3 };
}
--ES6
const getObj = () => ({ a: 1, b: 2, c: 3 });





##FUNCTION WITH PARAM
--ES5
function calcCircleArea(radius) {
    return Math.PI * radius * radius;
}
--ES6
const calcCircleArea = (radius) => Math.PI * radius * radius;




##FUNCTION WITH CONDITION
--ES5
function calcCircleArea(radius) {
    if(!radius) {
        return null;
    } else {
    return Math.PI * radius * radius;
    }
}
--ES6
const calcCicleArea = (radius) => {
    if(!radius){
        return null;
    } else {
        return Math.PI * radius * radius;
    }
}




##OBJECT MANIPULATION
-->DESTRUCTURING
var obj = { a: 1, b: 2 }
--ES5
var a = obj.a;
var b = obj.b;
--ES6
var { a, b } = obj;

-->DEFINING
var a = 1;
var b = 2;
--ES5
var obj = { a: a, b: b }
--ES6
var obj = { a, b }

-->MERGE OBJECTS
var obj1 = { a: 1, b: 2 };
var obj2 = { c: 3, d: 4 };
--ES5
var obj3 = Object.assign(obj1, obj2);
--ES6
var obj4 = { ...obj1, ...obj2 }




##CALLBACK VS PROMISE
--ES5
function isEvenNumber (num, callback) {
    if(num % 2 === 0) {
        callback(true);
    } else {
        callback(false);
    }
}
isEvenNumber (10, function(result) {
    if(result) {
        console.log('even number');
    } else {
        console.log('odd number');
    }
});
--ES6
const isEvenNumber = (num) => {
    return new Promise((resolve, reject) => {
            if (num % 2 === 0) {
            resolve(true);
        } else {
            reject(false);
        }
    });
};
isEvenNumber(10)
    .then((result) => { console.log('even number'); })
    .catch((error) => { console.log('odd number'); });




##MODULE IMPORTS AND EXPORTS
-->Export
var testModule = { a: 1, b: 2 };
--ES5
module.exports = testMudule;
--ES6
export default testModule;
export const a = 1;
export const b = 2;

-->Import
--ES5
var testMoudule = require(./testModule);
--ES6
import testModule from './testModule';
import { a, b } from './restModule';




##BLOCK SCOPING
var num = 0; // num is globally scoped
for (let i = 0; i < 5; i++) { // i is block scoped
  num += i;
}
console.log(num); // 0 + 1 + 2 + 3 + 4 = 10
console.log(i); // undefined




##TEMPLATE LITERAL (')
const a = 1;
const b = 'b';
--ES5
const c = 'value of a is ' + a + ' and value of b is ' + b;
--ES6
const c = `value of a is ${a} and value of b is ${b}`;






